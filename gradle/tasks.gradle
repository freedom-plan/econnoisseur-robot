task pathingJar(type: Jar, description: "Produces a 'pathing' JAR whose manifest class-path contains project runtime dependencies") {
  dependsOn configurations.runtime
  appendix = "pathing"

  doFirst {
    manifest {
      attributes "Class-Path": configurations.runtime.files.collect {
        it.toURL().toString().replaceFirst("/file:/+/", "/")}.join(" ")
    }
  }
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = "sources"
  from sourceSets.main.allSource
}

task resourcesJar(type: Jar) {
  classifier "resources"
  from project.file("src/main/resources")
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = "javadoc"
  from javadoc.destinationDir
}

task cleanLogs(description: "Clean build log files") {
  delete fileTree(dir: project.projectDir, includes: ["**/*.log", "**/*.gz", "**/*.log.gz"])
}

gradle.buildFinished { buildResult ->
  cleanLogs
}

clean.dependsOn("cleanLogs")

artifacts {
  archives sourcesJar
  archives javadocJar
  archives resourcesJar
}